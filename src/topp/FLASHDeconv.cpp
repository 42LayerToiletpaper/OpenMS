// --------------------------------------------------------------------------
//                   OpenMS -- Open-Source Mass Spectrometry
// --------------------------------------------------------------------------
// Copyright The OpenMS Team -- Eberhard Karls University Tuebingen,
// ETH Zurich, and Freie Universitaet Berlin 2002-2018.
//
// This software is released under a three-clause BSD license:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of any author or any participating institution
//    may be used to endorse or promote products derived from this software
//    without specific prior written permission.
// For a full list of authors, refer to the file AUTHORS.
// --------------------------------------------------------------------------
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING
// INSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// --------------------------------------------------------------------------
// $Maintainer: Kyowon Jeong, Jihyung Kim $
// $Authors: Kyowon Jeong, Jihyung Kim $
// --------------------------------------------------------------------------

#include <OpenMS/APPLICATIONS/TOPPBase.h>
#include <OpenMS/ANALYSIS/TOPDOWN/FLASHDeconvAlgorithm.h>
#include <OpenMS/ANALYSIS/TOPDOWN/MassFeatureTrace.h>
#include <OpenMS/ANALYSIS/TOPDOWN/DeconvolutedSpectrum.h>
#include <QFileInfo>
#include <OpenMS/FORMAT/FileTypes.h>
#include <OpenMS/FORMAT/MzMLFile.h>
#include <OpenMS/METADATA/SpectrumLookup.h>
#include <OpenMS/ANALYSIS/TOPDOWN/QScore.h>
#include <OpenMS/TRANSFORMATIONS/RAW2PEAK/PeakPickerHiRes.h>

using namespace OpenMS;
using namespace std;

//#define DEBUG_EXTRA_PARAMTER

//-------------------------------------------------------------
// Doxygen docu
//-------------------------------------------------------------
/**
  @page TOPP_FLASHDeconv TOPP_FLASHDeconv
  (Need to be modified)

  @brief  @ref
  @code
  @endcode
  @verbinclude
  @htmlinclude
*/


class TOPPFLASHDeconv :
        public TOPPBase {
public:
    TOPPFLASHDeconv() :
            TOPPBase("FLASHDeconv",
                     "Ultra-fast high-quality deconvolution enables online processing of top-down MS data") {
    }


protected:
    // this function will be used to register the tool parameters
    // it gets automatically called on tool execution
    void registerOptionsAndFlags_() override {

        registerInputFile_("in", "<file>", "", "Input file (mzML)");
        setValidFormats_("in", ListUtils::create<String>("mzML"));

#ifdef DEBUG_EXTRA_PARAMTER
        registerInputFile_("in_train", "<file>", "", "topPIC result *prsm.tsv file for QScore training", false, true);
        setValidFormats_("in_train", ListUtils::create<String>("tsv"));
        registerOutputFile_("out_train", "<file>", "", "train result csv file for QScore training", false, true);
        setValidFormats_("out_train", ListUtils::create<String>("csv"));
#endif

        registerInputFile_("in_log",
                           "<file>",
                           "",
                           "log file generated by FLASHIda. Only generated by real-time acquisition",
                           false,
                           true);
        setValidFormats_("in_log", ListUtils::create<String>("log"), false);

        registerOutputFile_("out",
                            "<file>",
                            "",
                            "output file (tsv) - feature level deconvoluted masses (or ensemble spectrum level deconvluted mass if use_ensemble_spectrum is set to 1) ");
        setValidFormats_("out", ListUtils::create<String>("tsv"));

        registerOutputFileList_("out_spec", "<file for MS1, file for MS2, ...>", {""},
                                "output files (tsv) - spectrum level deconvoluted masses per ms level", false);
        setValidFormats_("out_spec", ListUtils::create<String>("tsv"));

        registerOutputFile_("out_mzml", "<file>", "",
                            "mzml format output file (mzML) - spectrum level deconvoluted masses per ms level", false);
        setValidFormats_("out_mzml", ListUtils::create<String>("mzML"));

        registerOutputFile_("out_promex", "<file>", "",
                            "promex format output file (ms1ft) - only MS1 deconvoluted masses are recorded", false);
        setValidFormats_("out_promex", ListUtils::create<String>("ms1ft"), false);

        registerOutputFileList_("out_topFD",
                                "<file for MS1, file for MS2, ...>",
                                {""},
                                "topFD format output files (msalign) - spectrum level deconvoluted masses per ms level. The file name for MSn should end with msn.msalign to be able to be recognized by TopPIC. "
                                "For example, -out_topFD [name]_ms1.msalign [name]_ms2.msalign",
                                false);

        registerOutputFileList_("out_topFD_feature", "<file  for MS1, file for MS2, ...>", {""},
                                "topFD format output feature file (feature) format per MS level", false);
        setValidFormats_("out_topFD_feature", ListUtils::create<String>("feature"), false);

        setValidFormats_("out_topFD", ListUtils::create<String>("msalign"), false);

        registerDoubleOption_("min_precursor_snr", "<SNR value>", 1.0,
                              "minimum precursor SNR for identification. Now applies only for topFD outputs", false,
                              true);

        registerIntOption_("mzml_mass_charge",
                           "<0:uncharged 1: +1 charged -1: -1 charged>",
                           0,
                           "Charge status of deconvoluted masses in mzml output",
                           false);

        setMinInt_("mzml_mass_charge", -1);
        setMaxInt_("mzml_mass_charge", 1);

        registerIntOption_("preceding_MS1_count",
                           "<number>",
                           1,
                           "Specifies the number of preceding MS1 spectra for MS2 precursor determination. In TDP, some precursor peaks in MS2 are not part of "
                           "the deconvoluted masses in MS1 immediately preceding the MS2. In this case, increasing this parameter allows for the search in further preceding "
                           "MS1 spectra and helps determine exact precursor masses.",
                           false,
                           false);

        setMinInt_("preceding_MS1_count", 1);

        registerIntOption_("write_detail",
                           "<1:true 0:false>",
                           0,
                           "to write peak info per deconvoluted mass in detail or not in [prefix]_MSn_spec.tsv files. If set to 1, all peak information (m/z, intensity, charge, and isotope index) per mass is reported.",
                           false,
                           false);

        setMinInt_("write_detail", 0);
        setMaxInt_("write_detail", 1);

        registerIntOption_("max_MS_level", "", 2, "maximum MS level (inclusive) for deconvolution", false, true);
        setMinInt_("max_MS_level", 1);


        registerIntOption_("use_ensemble_spectrum",
                           "",
                           0,
                           "if set to 1, all spectra will add up to a single ensemble spectrum (per MS level) for which the deconvolution is performed. out_spec should specify the output spectrum level deconvolution tsv files.",
                           false,
                           false);

        setMinInt_("use_ensemble_spectrum", 0);
        setMaxInt_("use_ensemble_spectrum", 1);

        registerIntOption_("use_RNA_averagine", "", 0, "if set to 1, RNA averagine model is used", false, true);
        setMinInt_("use_RNA_averagine", 0);
        setMaxInt_("use_RNA_averagine", 1);


        Param fd_defaults = FLASHDeconvAlgorithm().getDefaults();
        // overwrite algorithm default so we export everything (important for copying back MSstats results)
        fd_defaults.setValue("tol", DoubleList{10.0, 10.0}, "ppm tolerance");
        fd_defaults.setValue("min_charge", 2);
        fd_defaults.setValue("max_charge", 100);
        fd_defaults.setValue("min_mz", -1.0);
        fd_defaults.addTag("min_mz", "advanced");
        fd_defaults.setValue("max_mz", -1.0);
        fd_defaults.addTag("max_mz", "advanced");
        fd_defaults.setValue("min_rt", -1.0);
        fd_defaults.addTag("min_rt", "advanced");
        fd_defaults.setValue("max_rt", -1.0);
        fd_defaults.addTag("max_rt", "advanced");
        fd_defaults.setValue("min_mass", 50.0);
        fd_defaults.setValue("max_mass", 100000.0);
        //fd_defaults.addTag("tol", "advanced"); // hide entry
        fd_defaults.setValue("min_peaks", IntList{2, 1});
        fd_defaults.addTag("min_peaks", "advanced");
        fd_defaults.setValue("min_intensity", .0, "intensity threshold");
        fd_defaults.addTag("min_intensity", "advanced");
        fd_defaults.setValue("min_isotope_cosine",
                             DoubleList{.8, .8},
                             "cosine threshold between avg. and observed isotope pattern for MS1, 2, ... (e.g., -min_isotope_cosine 0.8 0.6 to specify 0.8 and 0.6 for MS1 and MS2, respectively)");
        //fd_defaults.addTag("min_isotope_cosine_", "advanced");

        fd_defaults.setValue("max_mass_count",
                             IntList{-1, -1},
                             "maximum mass count per spec for MS1, 2, ... (e.g., -max_mass_count_ 100 50 to specify 100 and 50 for MS1 and MS2, respectively. -1 specifies unlimited)");
        fd_defaults.addTag("max_mass_count", "advanced");

        fd_defaults.setValue("rt_window", 180.0, "RT window for MS1 deconvolution");
        fd_defaults.addTag("rt_window", "advanced");

        fd_defaults.remove("max_mass_count");
        //fd_defaults.remove("min_mass_count");

        Param mf_defaults = MassFeatureTrace().getDefaults();
        mf_defaults.setValue("min_isotope_cosine",
                             -1.0,
                             "Cosine threshold between avg. and observed isotope pattern for mass features. if not set, controlled by -Algorithm:min_isotope_cosine_ option");
        mf_defaults.addTag("min_isotope_cosine", "advanced");
        mf_defaults.remove("noise_threshold_int");
        mf_defaults.remove("reestimate_mt_sd");
        mf_defaults.remove("trace_termination_criterion");
        mf_defaults.remove("trace_termination_outliers");
        mf_defaults.remove("chrom_peak_snr");

        mf_defaults.remove("mass_error_ppm"); // hide entry
        //mf_defaults.remove("min_sample_rate");

        Param combined;
        combined.insert("Algorithm:", fd_defaults);
        combined.insert("FeatureTracing:", mf_defaults);
        registerFullParam_(combined);
    }

    // the main_ function is called after all parameters are read
    ExitCodes main_(int, const char **) override {
        OPENMS_LOG_INFO << "Initializing ... " << endl;
        const bool write_detail_qscore_att = false;

        //-------------------------------------------------------------
        // parsing parameters
        //-------------------------------------------------------------

        String in_file = getStringOption_("in");
        String out_file = getStringOption_("out");
        String in_train_file = "";//getStringOption_("in_train");
        String in_log_file = getStringOption_("in_log");
        String out_train_file = "";//getStringOption_("out_train");
        auto out_spec_file = getStringList_("out_spec");
        String out_mzml_file = getStringOption_("out_mzml");
        String out_promex_file = getStringOption_("out_promex");
        auto out_topfd_file = getStringList_("out_topFD");
        auto out_topfd_feature_file = getStringList_("out_topFD_feature");
        double topFD_SNR_threshold = getDoubleOption_("min_precursor_snr");
        bool use_RNA_averagine = getIntOption_("use_RNA_averagine") > 0;
        int max_ms_level = getIntOption_("max_MS_level");
        bool ensemble = getIntOption_("use_ensemble_spectrum") > 0;
        bool write_detail = getIntOption_("write_detail") > 0;
        int mzml_charge = getIntOption_("mzml_mass_charge");
        double min_rt = getDoubleOption_("Algorithm:min_rt");
        double max_rt = getDoubleOption_("Algorithm:max_rt");

#ifdef DEBUG_EXTRA_PARAMTER
        auto out_topfd_file_log =  out_topfd_file[1] + ".log";
        fstream f_out_topfd_file_log;
        f_out_topfd_file_log.open(out_topfd_file_log, fstream::out);

        in_train_file = getStringOption_("in_train");
        out_train_file = getStringOption_("out_train");
        fstream fi_out;
        fi_out.open(in_file + ".txt", fstream::out); //
        fstream fi_m;
        auto fi_m_str(in_file);
        std::replace(fi_m_str.begin(), fi_m_str.end(), '_', 't');
        std::replace(fi_m_str.begin(), fi_m_str.end(), '.', 'd');
        fi_m.open(fi_m_str + ".m", fstream::out);
#endif

        fstream out_stream, out_train_stream, out_promex_stream;
        std::vector<fstream> out_spec_streams, out_topfd_streams, out_topfd_feature_streams;

        out_stream.open(out_file, fstream::out);
        MassFeatureTrace::writeHeader(out_stream);

        if (!out_promex_file.empty()) {
            out_promex_stream.open(out_promex_file, fstream::out);
            MassFeatureTrace::writePromexHeader(out_promex_stream);
        }

        if (!out_topfd_feature_file.empty()) {
            out_topfd_feature_streams = std::vector<fstream>(out_topfd_feature_file.size());
            for (int i = 0; i < out_topfd_feature_file.size(); i++) {
                out_topfd_feature_streams[i].open(out_topfd_feature_file[i], fstream::out);
            }
            MassFeatureTrace::writeTopFDFeatureHeader(out_topfd_feature_streams);
        }

        if (!out_topfd_file.empty()) {
            out_topfd_streams = std::vector<fstream>(out_topfd_file.size());
            for (int i = 0; i < out_topfd_file.size(); i++) {
                out_topfd_streams[i].open(out_topfd_file[i], fstream::out);
            }
        }
        if (!out_spec_file.empty()) {
            out_spec_streams = std::vector<fstream>(out_spec_file.size());
            for (int i = 0; i < out_spec_file.size(); i++) {
                out_spec_streams[i].open(out_spec_file[i], fstream::out);
                DeconvolutedSpectrum::writeDeconvolutedMassesHeader(out_spec_streams[i], i + 1, write_detail);
            }
        }

        std::unordered_map<int, FLASHDeconvHelperStructs::TopPicItem> top_pic_map;

        if (!in_train_file.empty() && !out_train_file.empty()) {
            out_train_stream.open(out_train_file, fstream::out);
            QScore::writeAttHeader(out_train_stream, write_detail_qscore_att);
            std::ifstream in_trainstream(in_train_file);
            String line;
            bool start = false;
            while (std::getline(in_trainstream, line)) {
                if (line.rfind("Data file name", 0) == 0) {
                    start = true;
                    continue;
                }
                if (!start) {
                    continue;
                }

                auto tp = FLASHDeconvHelperStructs::TopPicItem(line);
                top_pic_map[tp.scan_] = tp;
            }
            in_trainstream.close();
        }


        std::map<int, std::vector<std::vector<double>>> precursor_map_for_real_time_acquisition; // ms1 scan -> mass, charge ,score, mz range, precursor int, mass int, color
        if (!in_log_file.empty())
        {
            std::ifstream instream(in_log_file);
            if (instream.good()) {
                String line;
                int scan;
                double mass, charge, w1, w2, qscore, pint, mint, z1, z2;
                double features[6];
                while (std::getline(instream, line)) {
                    if (line.find("0 targets") != line.npos) {
                        continue;
                    }
                    if (line.hasPrefix("MS1")) {
                        Size st = line.find("MS1 Scan# ") + 10;
                        Size ed = line.find(' ', st);
                        String n = line.substr(st, ed);
                        scan = atoi(n.c_str());
                        precursor_map_for_real_time_acquisition[scan] = std::vector<std::vector<double>>();//// ms1 scan -> mass, charge ,score, mz range, precursor int, mass int, color
                    }
                    if (line.hasPrefix("Mass")) {
                        Size st = 5;
                        Size ed = line.find('\t');
                        String n = line.substr(st, ed);
                        mass = atof(n.c_str());

                        st = line.find("Z=") + 2;
                        ed = line.find('\t', st);
                        n = line.substr(st, ed);
                        charge = atof(n.c_str());

                        st = line.find("Score=") + 6;
                        ed = line.find('\t', st);
                        n = line.substr(st, ed);
                        qscore = atof(n.c_str());

                        st = line.find("[") + 1;
                        ed = line.find('-', st);
                        n = line.substr(st, ed);
                        w1 = atof(n.c_str());

                        st = line.find('-', ed) + 1;
                        ed = line.find(']', st);
                        n = line.substr(st, ed);
                        w2 = atof(n.c_str());

                        st = line.find("PrecursorIntensity=", ed) + 19;
                        ed = line.find('\t', st);
                        n = line.substr(st, ed);
                        pint = atof(n.c_str());

                        st = line.find("PrecursorMassIntensity=", ed) + 23;
                        ed = line.find('\t', st);
                        n = line.substr(st, ed);
                        mint = atof(n.c_str());

                        st = line.find("Features=", ed) + 9;
                        //ed = line.find(' ', st);

                        st = line.find('[', st) + 1;
                        ed = line.find(',', st);
                        n = line.substr(st, ed);
                        features[0] = atof(n.c_str());

                        st = line.find(',', st) + 1;
                        ed = line.find(',', st);
                        n = line.substr(st, ed);
                        features[1] = atof(n.c_str());

                        st = line.find(',', st) + 1;
                        ed = line.find(',', st);
                        n = line.substr(st, ed);
                        features[2] = atof(n.c_str());

                        st = line.find(',', st) + 1;
                        ed = line.find(',', st);
                        n = line.substr(st, ed);
                        features[3] = atof(n.c_str());

                        st = line.find(',', st) + 1;
                        ed = line.find(',', st);
                        n = line.substr(st, ed);
                        features[4] = atof(n.c_str());

                        st = line.find(',', st) + 1;
                        ed = line.find(']', st);
                        n = line.substr(st, ed);
                        features[5] = atof(n.c_str());

                        st = line.find("ChargeRange=[", ed) + 13;
                        ed = line.find('-', st);
                        n = line.substr(st, ed);
                        z1 = atof(n.c_str());

                        st = line.find("-", ed) + 1;
                        ed = line.find(']', st);
                        n = line.substr(st, ed);
                        z2 = atof(n.c_str());
                        std::vector<double> e(15);
                        e[0] = mass;
                        e[1] = charge;
                        e[2] = qscore;
                        e[3] = w1;
                        e[4] = w2;
                        e[5] = pint;
                        e[6] = mint;
                        e[7] = z1;
                        e[8] = z2;
                        for (int i = 9; i < 15; i++) {
                            e[i] = features[i - 9];
                        }
                        precursor_map_for_real_time_acquisition[scan].push_back(e);
                    }
                }
//precursor_map_for_real_time_acquisition[scan] = std::vector<std::vector<double>>();//// ms1 scan -> mass, charge ,score, mz range, precursor int, mass int, color
                instream.close();
            } else {
                std::cout << in_log_file << " not found\n";
            }
        }
        int current_max_ms_level = 0;

        auto spec_cntr = std::vector<int>(max_ms_level, 0);
        // spectrum number with at least one deconvoluted mass per ms level per input file
        auto qspec_cntr = std::vector<int>(max_ms_level, 0);
        // mass number per ms level per input file
        auto mass_cntr = std::vector<int>(max_ms_level, 0);
        // feature number per input file
        int feature_cntr = 0;

        // feature index written in the output file
        int feature_index = 1;

        MSExperiment ensemble_map;
        // generate ensemble spectrum if param.ensemble is set
        if (ensemble) {
            for (int i = 0; i < max_ms_level; i++) {
                auto spec = MSSpectrum();
                spec.setMSLevel(i + 1);
                std::ostringstream name;
                name << "ensemble MS" << (i + 1) << " spectrum";
                spec.setName(name.str());
                ensemble_map.addSpectrum(spec);
            }
        }

        //-------------------------------------------------------------
        // reading input
        //-------------------------------------------------------------

        MSExperiment map;
        MzMLFile mzml;

        // all for measure elapsed cup wall time
        double elapsed_cpu_secs = 0, elapsed_wall_secs = 0;
        auto elapsed_deconv_cpu_secs = std::vector<double>(max_ms_level, .0);
        auto elapsed_deconv_wall_secs = std::vector<double>(max_ms_level, .0);

        auto begin = clock();
        auto t_start = chrono::high_resolution_clock::now();

        OPENMS_LOG_INFO << "Processing : " << in_file << endl;

        mzml.setLogType(log_type_);
        mzml.load(in_file, map);

        //      double rtDuration = map[map.size() - 1].getRT() - map[0].getRT();
        int ms1_cntr = 0;
        double ms2_cntr = .0; // for debug...
        current_max_ms_level = 0;

        // read input dataset once to count spectra and generate ensemble spectrum if necessary
        for (auto &it : map) {
            if (it.empty()) {
                continue;
            }
            if (it.getMSLevel() > max_ms_level) {
                continue;
            }

            int ms_level = it.getMSLevel();
            current_max_ms_level = current_max_ms_level < ms_level ? ms_level : current_max_ms_level;

            if (min_rt > 0 && it.getRT() < min_rt) {
                continue;
            }
            if (max_rt > 0 && it.getRT() > max_rt) {
                break;
            }
            if (ensemble) {
                auto &espec = ensemble_map[it.getMSLevel() - 1];
                for (auto &p : it) {
                    espec.push_back(p);
                }
            }

            if (it.getMSLevel() == 1) {
                ms1_cntr++;
            }
            if (it.getMSLevel() == 2) {
                ms2_cntr++;
            }
        }

        // Max MS Level is adjusted according to the input dataset
        current_max_ms_level = current_max_ms_level > max_ms_level ? max_ms_level : current_max_ms_level;
        // if an ensemble spectrum is analyzed, replace the input dataset with the ensemble one
        if (ensemble) {
            for (int i = 0; i < current_max_ms_level; ++i) {
                ensemble_map[i].sortByPosition();
                //spacing_difference_gap
                PeakPickerHiRes pickerHiRes;
                auto pickParam = pickerHiRes.getParameters();
                //pickParam.setValue("spacing_difference_gap", 1e-1);
                //pickParam.setValue("spacing_difference", 2.0);
                //pickParam.setValue("missing", 0);

                pickerHiRes.setParameters(pickParam);
                auto tmp_spec = ensemble_map[i];
                pickerHiRes.pick(tmp_spec, ensemble_map[i]);

                // PeakPickerCWT picker;
                // tmp_spec = ensemble_map[i];
                //picker.pick(tmp_spec, ensemble_map[i]);
            }
            //MzMLFile mzml_file;
            //mzml_file.store("/Users/kyowonjeong/Documents/A4B/Results/ensemble.mzML", ensemble_map);//

            map = ensemble_map;
        }
        // Run FLASHDeconv here

        int scan_number = 0;
        float prev_progress = .0;
        int num_last_deconvoluted_spectra = getIntOption_("preceding_MS1_count");
        const int max_num_last_deconvoluted_spectra = std::max(50, num_last_deconvoluted_spectra * 2);
        auto last_deconvoluted_spectra = std::unordered_map<UInt, std::vector<DeconvolutedSpectrum>>();
        //auto lastlast_deconvoluted_spectra = std::unordered_map<UInt, DeconvolutedSpectrum>();
#ifdef DEBUG_EXTRA_PARAMTER
        std::set<int> m2_scans;

        // low SNR scans topFD
        //std::set<int>  m_scans{957,993,1029,1058,1280,1364,1401,1404,1419,1424,1439,1444,1663,1722,1875,1881,1896,1902,1906,1912,1919,1921,1923,1980,1984,2016,2046,2071,2079,2104,2106,2116,2129,2133,2134,2145,2164,2184,2192,2194,2204,2214,2219,2224,2229,2239,2242,2244,2247,2249,2254,2262,2269,2272,2277,2282,2289,2297,2302,2304,2307,2312,2313,2318,2319,2328,2329,2334,2337,2342,2352,2358,2362,2367,2377,2382,2402,2426,2427,2434,2445,2447,2457,2462,2472,2477,2482,2487,2494,2497,2499,2502,2517,2519,2542,2545,2552,2557,2567,2573,2576,2578,2587,2592,2598,2608,2613,2617,2618,2623,2638,2642,2647,2653,2668,2672,2673,2678,2687,2693,2703,2707,2712,2717,2718,2723,2727,2732,2737,2738,2743,2747,2748,2752,2758,2762,2763,2773,2777,2787,2788,2792,2793,2802,2803,2812,2813,2818,2822,2833,2837,2838,2842,2847,2858,2862,2882,2897,2902,2907,2912,2922,2928,2937,2942,2947,2952,2957,2958,2967,2973,2977,2987,2998,3003,3018,3033,3043,3048,3052,3057,3058,3067,3068,3078,3082,3092,3102,3112,3117,3122,3127,3133,3148,3152,3158,3162,3183,3188,3193,3198,3200,3208,3212,3218,3223,3227,3228,3233,3252,3253,3257,3267,3272,3277,3278,3283,3292,3297,3298,3302,3303,3307,3308,3312,3313,3318,3323,3327,3328,3333,3337,3338,3342,3343,3347,3348,3352,3353,3357,3358,3367,3382,3383,3393,3398,3402,3403,3413,3417,3418,3423,3428,3443,3452,3453,3462,3472,3477,3483,3487,3488,3492,3493,3498,3513,3528,3533,3538,3543,3547,3548,3552,3553,3557,3573,3578,3583,3587,3588,3607,3608,3617,3618,3623,3633,3637,3643,3647,3648,3653,3658,3662,3663,3668,3673,3678,3683,3687,3692,3693,3697,3698,3703,3717,3718,3723,3728,3733,3738,3752,3757,3762,3763,3767,3778,3793,3802,3803,3808,3814,3818,3821,3826,3827,3828,3838,3842,3847,3848,3853,3856,3866,3868,3881,3883,3887,3892,3897,3908,3911,3916,3936,3942,3943,3948,3952,3953,3956,3962,3967,3982,3986,3993,3998,4006,4007,4011,4017,4031,4032,4041,4043,4046,4048,4051,4056,4061,4066,4071,4072,4079,4083,4089,4098,4103,4108,4128,4132,4153,4154,4157,4159,4169,4174,4188,4202,4204,4213,4218,4222,4228,4233,4250,4255,4260,4267,4269,4274,4275,4279,4287,4289,4294,4295,4297,4300,4320,4322,4324,4329,4334,4335,4352,4364,4365,4370,4387,4390,4395,4412,4419,4422,4424,4427,4429,4435,4439,4459,4467,4469,4514,4515,4517,4525,4532,4545,4574,4584,4590,4594,4597,4599,4600,4602,4604,4607,4609,4612,4614,4619,4622,4624,4625,4627,4632,4635,4645,4650,4655,4660,4685,4760,4777,4780,4802,4812,4822,4830,4877,4880,4902,4937,4957,4962,4972,4975,4980,4985,4987,4990,5002,5005,5017,5032,5042,5060,5062,5067,5072,5075,5077,5082,5087,5092,5102,5107,5117,5132,5137,5145,5147,5162,5180,5182,5193,5213,5218,5223,5225,5248,5255,5272,5278,5285,5293,5313,5315,5323,5357,5358,5382,5385,5417,5433,5442,5447,5450,5455,5460,5465,5477,5480,5483,5498,5533,5537,5542,5568,5570,5573,5575,5585,5592,5595,5602,5610,5613,5618,5623,5628,5642,5643,5650,5657,5663,5673,5675,5687,5725,5727,5753,5763,5783,5793,5795,5797,5807,5808,5818,5823,5832,5843,5845,5848,5850,5853,5855,5867,5868,5870,5872,5875,5880,5883,5888,5893,5912,5913,5927,5953,5958,5960,5963,5973,5987,5992,6013,6018,6023,6042,6045,6048,6078,6087,6090,6113,6115,6128,6132,6135,6138,6140,6152,6162,6163,6193,6197,6205,6207,6227,6232,6233,6257,6280,6285,6287,6302,6310,6313,6318,6330,6333,6335,6338,6348,6350,6355,6358,6363,6365,6368,6377,6378,6382,6388,6400,6408,6413,6437,6452,6462,6473,6505,6510,6512,6535,6558,6563,6577,6578,6583,6588,6598,6608,6622,6625,6628,6632,6637,6647,6652,6655,6662,6667,6675,6683,6685,6690,6700,6732,6745,6748,6750,6760,6763,6768,6783,6788,6798,6800,6803,6805,6808,6815,6817,6820,6823,6825,6828,6830,6835,6842,6847,6858,6872,6875,6877,6887,6890,6900,6902,6905,6907,6910,6915,6920,6925,6930,6935,6940,6942,6945,6947,6950,6952,6955,6960,6965,6970,6972,6975,6977,6980,6982,6985,6987,6990,6995,6997,7000,7010,7012,7020,7025,7030,7040,7042,7045,7055,7060,7062,7070,7075,7082,7085,7087,7090,7092,7095,7097,7100,7105,7110,7115,7120,7122,7125,7127,7130,7132,7135,7140,7142,7147,7150,7155,7157,7160,7162,7165,7167,7170,7172,7175,7180,7185,7187,7190,7195,7200,7205,7207,7210,7220,7222,7225,7227,7230,7232,7237,7240,7245,7247,7250,7252,7255,7262,7267,7270,7272,7275,7277,7280,7282,7285,7287,7290,7292,7295,7297,7300,7302,7305,7307,7310,7312,7315,7320,7322,7325,7327,7330,7332,7335,7337,7340,7342,7345,7347,7350,7352,7355,7357,7360,7362,7365,7370,7372,7375,7377,7385,7390,7397,7400,7402,7405,7407,7410,7412,7415,7417,7420,7425,7430,7437,7440,7442,7447,7450,7452,7455,7460,7462,7467,7470,7472,7475,7480,7497,7500,7502,7505,7507,7515,7520,7522,7525,7532,7537,7540,7545,7555,7567,7570,7581,7591,7595,7600,7601,7605,7615,7621,7626,7630,7645,7650,7652,7655,7656,7662,7676,7677,7685,7687,7690,7691,7692,7695,7700,7702,7710,7715,7717,7726,7727,7730,7731,7737,7752,7755,7770,7776,7780,7786,7787,7790,7796,7811,7830,7836,7847,7850,7857,7865,7870,7871,7875,7880,7881,7890,7891,7896,7897,7901,7902,7911,7931,7932,7937,7942,7951,7955,7961,7977,7987,7992,8006,8007,8010,8020,8022,8026,8030,8031,8040,8050,8055,8057,8061,8072,8077,8080,8081,8086,8087,8090,8095,8100,8101,8102,8107,8112,8126,8135,8140,8145,8146,8151,8156,8162,8167,8170,8172,8176,8180,8181,8186,8191,8192,8195,8197,8201,8202,8206,8212,8215,8217,8225,8227,8237,8240,8242,8250,8252,8262,8265,8275,8282,8285,8287,8302,8310,8312,8327,8332,8337,8342,8348,8350,8357,8360,8362,8367,8372,8375,8377,8382,8385,8387,8392,8397,8400,8402,8407,8417,8432,8437,8442,8447,8450,8452,8455,8465,8467,8472,8480,8482,8485,8492,8495,8497,8500,8502,8505,8507,8510,8512,8515,8517,8520,8522,8525,8527,8532,8537,8540,8542,8547,8550,8552,8555,8557,8562,8565,8567,8570,8572,8575,8582,8585,8607,8612,8615,8617,8622,8625,8635,8642,8645,8647,8650,8662,8672,8675,8677,8680,8682,8685,8690,8692,8697,8705,8707,8715,8722,8730,8732,8735,8742,8752,8760,8772,8775,8782,8785,8787,8795,8807,8815,8817,8825,8827,8830,8832,8837,8842,8847,8852,8857,8862,8867,8872,8877,8880,8882,8885,8887,8890,8892,8895,8900,8902,8905,8907,8910,8915,8920,8925,8930,8937,8940,8942,8945,8947,8950,8952,8955,8970,8975,8977,8980,8982,8985,8987,8990,8992,8997,9000,9005,9007,9010,9015,9020,9025,9030,9032,9035,9040,9042,9045,9047,9050,9052,9055,9057,9060,9062,9065,9067,9070,9072,9075,9077,9080,9082,9085,9087,9090,9092,9100,9102,9110,9115,9120,9122,9125,9127,9130,9135,9140,9145,9147,9150,9152,9155,9157,9160,9162,9165,9170,9175,9180,9185,9192,9197,9205,9210,9215,9217,9220,9225,9230,9232,9235,9237,9240,9242,9245,9247,9250,9252,9255,9257,9262,9265,9267,9270,9275,9280,9282,9285,9287,9295,9300,9305,9310,9312,9315,9317,9320,9322,9330,9332,9335,9340,9345,9350,9355,9357,9360,9370,9372,9375,9380,9382,9385,9392,9400,9405,9412,9415,9420,9427,9430,9432,9435,9437,9440,9445,9447,9450,9455,9457,9460,9462,9470,9475,9477,9482,9485,9487,9490,9495,9497,9502,9505,9507,9510,9512,9515,9520,9525,9535,9540,9542,9545,9547,9555,9561,9565,9576,9577,9580,9590,9595,9596,9605,9615,9617,9620,9625,9656,9657,9677,9680,9681,9695,9707,9725,9736,9745,9785,9786,9792,9795,9797,9801,9812,9820,9841,9855,9865,9882,9905,9912,9917,9922,9927,9935,9942,9947,9957,9967,9982,10002,10022,10037,10042,10055,10062,10095,10105,10107,10112,10115,10120,10122,10127,10130,10142,10145,10160,10168,10170,10188,10193,10208,10212,10215,10218,10228,10233,10235,10243,10255,10262,10275,10285,10297,10305,10312,10315,10328,10357,10373,10377,10378,10393,10395,10397,10410,10413,10418,10435,10442,10458,10472,10490,10502,10532,10552,10570,10577,10580,10587,10595,10600,10602,10603,10608,10613,10618,10620,10635,10643,10655,10663,10675,10683,10685,10688,10690,10693,10703,10708,10718,10723,10735,10738,10740,10753,10758,10763,10790,10800,10815,10820,10833,10838,10848,10878,10883,10893,10905,10923,10948,10968,10973,10993,11000,11005,11008,11013,11023,11025,11033,11043,11048,11055,11074,11090,11098,11110,11113,11118,11135,11144,11154,11168,11174,11175,11178,11179,11188,11195,11200,11208,11213,11214,11215,11224,11225,11233,11245,11249,11263,11264,11265,11268,11269,11285,11293,11310,11314,11315,11325,11369,11370,11374,11379,11380,11383,11384,11394,11400,11405,11408,11409,11419,11420,11428,11434,11439,11444,11449,11468,11484,11494,11546,11549,11551,11554,11556,11559,11563,11566,11569,11571,11601,11603,11609,11651,11664,11666,11681,11693,11701,11706,11718,11733,11734,11739,11743,11746,11748,11753,11763,11764,11768,11774,11778,11783,11793,11808,11836,11839,11856,11869,11874,11879,11884,11899,11904,11906,11914,11919,11974,12026,12029,12034,12044,12059,12065,12070,12149,12154,12155,12159,12160,12165,12169,12170,12176,12179,12180,12185,12190,12194,12199,12204,12205,12215,12229,12239,12249,12250,12254,12269,12270,12274,12279,12280,12284,12285,12286,12294,12315,12316,12325,12331,12335,12350,12354,12359,12361,12364,12365,12366,12370,12374,12379,12381,12384,12391,12394,12409,12411,12419,12429,12430,12436,12440,12441,12444,12445,12446,12449,12450,12459,12460,12476,12480,12491,12501,12511,12514,12516,12531,12534,12536,12565,12569,12579,12584,12599,12601,12605,12606,12615,12620,12621,12629,12635,12644,12670,12674,12675,12679,12680,12684,12694,12695,12704,12705,12706,12709,12710,12711,12714,12715,12766,12775,12776,12779,12781,12786,12794,12799,12804,12806,12810,12816,12819,12824,12831,12834,12844,12849,12850,12851,12856,12864,12874,12875,12876,12880,12885,12895,12905,12911,12916,12921,12926,12930,12931,12934,12936,12941,12951,12970,12974,12975,12979,12984,12985,13001,13009,13020,13029,13030,13036,13041,13049,13054,13061,13071,13109,13116,13120,13124,13125,13126,13164,13165,13169,13170,13171,13175,13201,13241,13265,13301,13316,13394,13401,13409,13420,13424,13425,13465,13496,13500,13505,13525,13530,13541,13556,13570,13608,13638,13648,13658,13685,13696,13697,13702,13712,13716,13734,13737,13770,13784,13819,13821,13826,13831,13841,13911,13917,13937,13942,14057,14067,14225,14413,14483,14552,14632};

        //low SNR scans FLASHDeconv
        std::set<int>  m_scans{967,969,972,977,982,992,997,1007,1023,1028,1033,1038,1043,1053,1063,1073,1081,1116,1129,1145,1166,1178,1192,1216,1235,1240,1284,1313,1345,1404,1424,1435,1439,1577,1618,1626,1651,1757,1794,1801,1865,1884,1885,1890,1895,1906,1907,1910,1911,1917,1919,1922,1928,1931,1936,1941,1955,1956,1961,1962,1969,1971,1976,1984,1989,1997,1999,2004,2011,2014,2016,2021,2024,2026,2029,2031,2034,2036,2039,2046,2049,2051,2056,2059,2061,2064,2066,2069,2071,2074,2076,2081,2084,2091,2094,2096,2104,2106,2109,2111,2116,2119,2123,2124,2128,2144,2149,2159,2174,2179,2189,2199,2202,2204,2207,2212,2219,2224,2229,2232,2234,2239,2242,2244,2247,2249,2252,2254,2257,2264,2269,2274,2279,2284,2289,2292,2299,2302,2303,2304,2307,2312,2313,2317,2318,2323,2327,2332,2337,2338,2342,2347,2348,2358,2367,2368,2383,2388,2397,2402,2407,2412,2417,2427,2432,2437,2442,2445,2452,2457,2462,2467,2470,2472,2477,2479,2482,2487,2494,2499,2504,2507,2509,2514,2519,2522,2527,2529,2534,2535,2542,2547,2552,2555,2577,2581,2582,2588,2592,2598,2601,2602,2607,2608,2613,2617,2622,2623,2628,2632,2633,2642,2643,2647,2648,2652,2653,2657,2658,2662,2663,2667,2668,2673,2677,2678,2688,2692,2693,2702,2707,2708,2712,2717,2722,2727,2728,2733,2738,2742,2743,2748,2752,2757,2758,2767,2772,2777,2778,2783,2788,2792,2802,2803,2812,2813,2817,2818,2827,2832,2837,2838,2842,2847,2848,2852,2857,2862,2867,2868,2872,2873,2877,2878,2882,2883,2893,2898,2902,2903,2912,2917,2918,2922,2927,2928,2932,2933,2952,2958,2963,2968,2972,2977,2978,2982,2987,2988,2992,2997,3007,3008,3013,3017,3022,3023,3027,3028,3033,3038,3042,3043,3047,3048,3053,3063,3068,3073,3077,3078,3083,3088,3098,3103,3107,3112,3113,3117,3118,3128,3153,3158,3162,3163,3167,3172,3177,3183,3198,3207,3208,3212,3213,3217,3218,3222,3237,3238,3243,3247,3248,3257,3258,3262,3263,3267,3268,3272,3278,3282,3283,3287,3288,3293,3298,3303,3308,3313,3323,3328,3332,3333,3337,3338,3342,3343,3348,3352,3353,3358,3363,3367,3372,3393,3397,3398,3412,3413,3423,3427,3432,3433,3443,3448,3452,3453,3458,3462,3467,3472,3473,3477,3478,3483,3487,3488,3492,3498,3507,3512,3513,3517,3523,3533,3543,3548,3553,3558,3563,3568,3573,3578,3583,3593,3597,3598,3602,3603,3608,3613,3617,3618,3623,3627,3628,3638,3642,3643,3647,3657,3663,3667,3672,3673,3678,3683,3688,3697,3702,3708,3712,3713,3717,3722,3723,3728,3732,3733,3737,3742,3743,3747,3748,3752,3753,3757,3758,3762,3763,3767,3768,3778,3783,3787,3788,3792,3793,3797,3798,3802,3807,3808,3812,3817,3832,3833,3837,3838,3842,3846,3851,3853,3856,3858,3861,3862,3863,3866,3867,3878,3883,3886,3887,3888,3902,3903,3906,3907,3913,3931,3933,3936,3937,3941,3942,3943,3948,3957,3961,3966,3968,3971,3972,3977,3978,3981,3987,3988,3991,3992,3996,3997,3998,4001,4002,4006,4007,4008,4013,4016,4018,4021,4026,4031,4032,4033,4036,4038,4041,4042,4043,4048,4051,4052,4057,4061,4062,4063,4067,4068,4071,4072,4077,4079,4084,4087,4089,4092,4093,4094,4099,4103,4107,4108,4109,4119,4122,4127,4128,4132,4133,4134,4138,4142,4143,4144,4148,4149,4153,4154,4159,4162,4164,4188,4189,4198,4202,4213,4217,4219,4222,4229,4232,4245,4249,4264,4265,4269,4272,4274,4275,4277,4285,4289,4290,4294,4295,4299,4300,4302,4304,4305,4309,4310,4312,4314,4315,4319,4320,4327,4329,4337,4340,4342,4344,4345,4352,4357,4362,4367,4372,4377,4382,4385,4389,4390,4392,4394,4395,4399,4402,4409,4412,4414,4417,4419,4422,4425,4430,4437,4439,4442,4445,4449,4450,4454,4464,4465,4470,4472,4475,4480,4484,4485,4495,4497,4499,4504,4505,4509,4514,4519,4524,4529,4532,4534,4535,4542,4547,4550,4554,4557,4564,4565,4567,4569,4575,4582,4584,4585,4587,4589,4592,4594,4600,4602,4604,4605,4612,4620,4627,4637,4642,4650,4660,4662,4664,4667,4675,4677,4680,4687,4692,4700,4702,4705,4707,4715,4730,4732,4735,4742,4752,4757,4762,4772,4775,4792,4797,4802,4810,4812,4825,4832,4837,4840,4842,4847,4850,4855,4862,4867,4872,4877,4880,4882,4890,4895,4902,4905,4907,4910,4912,4917,4920,4922,4930,4937,4940,4942,4947,4950,4955,4960,4962,4965,4975,4982,4985,4990,4992,4997,5000,5002,5005,5007,5012,5015,5022,5025,5027,5032,5035,5037,5040,5042,5052,5057,5060,5062,5067,5072,5077,5082,5087,5100,5107,5117,5122,5137,5142,5145,5147,5150,5155,5157,5162,5167,5177,5182,5185,5190,5192,5193,5195,5197,5198,5203,5210,5213,5218,5220,5222,5228,5230,5233,5235,5237,5238,5240,5245,5248,5250,5252,5257,5265,5267,5273,5275,5280,5290,5292,5295,5298,5300,5317,5323,5327,5335,5338,5340,5342,5347,5350,5353,5360,5362,5365,5367,5368,5372,5373,5375,5378,5380,5385,5387,5388,5390,5392,5397,5403,5405,5407,5410,5412,5413,5415,5417,5420,5423,5427,5430,5435,5438,5447,5448,5450,5452,5455,5457,5458,5462,5463,5467,5475,5480,5490,5492,5493,5495,5497,5500,5507,5508,5512,5518,5520,5522,5530,5532,5535,5537,5543,5545,5555,5557,5562,5563,5568,5573,5575,5580,5582,5583,5585,5587,5592,5593,5595,5597,5603,5605,5607,5608,5610,5613,5617,5623,5628,5633,5635,5637,5638,5640,5642,5643,5647,5650,5652,5653,5657,5658,5665,5667,5670,5673,5675,5677,5678,5682,5685,5688,5690,5692,5693,5697,5698,5702,5703,5708,5710,5712,5717,5718,5720,5722,5723,5725,5727,5728,5730,5732,5733,5735,5737,5738,5740,5742,5743,5747,5752,5753,5755,5757,5760,5763,5768,5773,5775,5777,5780,5782,5783,5787,5790,5797,5800,5802,5807,5808,5810,5812,5813,5818,5820,5822,5825,5837,5842,5848,5850,5852,5853,5855,5857,5858,5860,5863,5865,5868,5877,5878,5880,5885,5888,5893,5895,5897,5900,5902,5905,5907,5908,5915,5918,5923,5925,5930,5932,5937,5938,5942,5943,5945,5947,5950,5952,5953,5955,5957,5962,5963,5965,5967,5972,5973,5975,5983,5988,5992,5993,5995,5997,6003,6007,6010,6012,6013,6018,6020,6022,6023,6025,6038,6042,6043,6045,6047,6050,6052,6053,6055,6062,6063,6065,6067,6075,6078,6088,6090,6093,6095,6098,6103,6107,6113,6117,6118,6123,6125,6127,6130,6132,6138,6142,6145,6152,6153,6157,6158,6163,6165,6178,6180,6183,6188,6193,6200,6202,6203,6210,6212,6213,6218,6220,6223,6237,6238,6240,6242,6243,6245,6247,6248,6250,6257,6258,6260,6263,6265,6267,6268,6270,6272,6278,6280,6285,6287,6288,6290,6292,6297,6298,6300,6302,6303,6305,6308,6310,6313,6315,6317,6320,6322,6323,6327,6330,6332,6333,6338,6342,6345,6347,6350,6353,6357,6358,6360,6362,6363,6368,6370,6375,6377,6383,6385,6388,6392,6398,6402,6403,6405,6407,6412,6415,6418,6420,6422,6423,6430,6433,6435,6438,6440,6442,6447,6448,6453,6458,6460,6465,6468,6470,6472,6473,6477,6480,6483,6485,6488,6493,6497,6498,6503,6505,6508,6510,6517,6522,6523,6525,6527,6528,6530,6533,6537,6538,6540,6543,6547,6548,6550,6553,6558,6562,6567,6570,6575,6578,6582,6583,6585,6587,6588,6590,6592,6593,6595,6597,6600,6605,6608,6610,6612,6617,6620,6622,6623,6625,6630,6640,6650,6655,6662,6670,6677,6680,6690,6697,6700,6705,6710,6713,6725,6727,6728,6735,6737,6743,6747,6750,6752,6753,6760,6762,6763,6765,6767,6768,6773,6775,6778,6783,6788,6790,6792,6793,6797,6800,6807,6808,6813,6815,6817,6823,6827,6828,6837,6838,6843,6845,6848,6850,6852,6862,6865,6870,6875,6877,6880,6882,6885,6890,6895,6902,6905,6907,6910,6912,6915,6920,6922,6927,6930,6932,6935,6940,6942,6950,6952,6955,6960,6965,6967,6972,6975,6977,6980,6982,6985,6987,6995,7000,7007,7010,7015,7017,7020,7022,7025,7032,7035,7042,7045,7047,7055,7060,7065,7070,7072,7075,7077,7080,7082,7092,7095,7100,7110,7112,7115,7120,7125,7127,7130,7135,7137,7140,7152,7155,7160,7165,7167,7190,7200,7205,7207,7210,7215,7220,7225,7227,7235,7237,7240,7242,7245,7250,7252,7255,7265,7267,7275,7277,7280,7282,7285,7290,7292,7295,7305,7312,7317,7320,7325,7330,7332,7337,7345,7360,7365,7375,7380,7382,7385,7392,7395,7397,7402,7405,7415,7417,7425,7440,7445,7455,7457,7462,7465,7472,7482,7485,7490,7495,7497,7500,7502,7505,7512,7515,7520,7522,7525,7527,7530,7532,7535,7537,7540,7545,7547,7550,7555,7557,7560,7562,7567,7570,7571,7576,7577,7580,7582,7595,7597,7600,7601,7607,7611,7615,7621,7622,7625,7630,7635,7637,7645,7655,7661,7671,7672,7675,7676,7681,7686,7691,7695,7697,7701,7702,7706,7707,7711,7716,7721,7722,7727,7730,7732,7735,7736,7737,7740,7741,7755,7756,7757,7767,7775,7776,7777,7782,7785,7787,7790,7791,7797,7801,7802,7806,7807,7810,7811,7815,7822,7826,7831,7835,7837,7841,7847,7855,7865,7866,7867,7871,7872,7877,7880,7890,7897,7902,7905,7912,7915,7917,7920,7922,7926,7930,7931,7932,7935,7936,7937,7940,7941,7942,7945,7946,7947,7950,7952,7956,7967,7975,7976,7977,7981,7985,7987,7991,7992,8010,8011,8017,8020,8022,8035,8037,8041,8046,8050,8051,8052,8056,8057,8061,8066,8067,8071,8075,8076,8080,8082,8085,8092,8097,8100,8105,8111,8112,8121,8122,8130,8137,8140,8141,8145,8152,8157,8166,8171,8181,8182,8185,8186,8191,8192,8195,8207,8217,8220,8225,8227,8232,8237,8245,8247,8252,8257,8260,8262,8275,8277,8280,8282,8285,8287,8290,8292,8295,8297,8310,8312,8317,8320,8322,8330,8332,8335,8337,8342,8357,8362,8367,8372,8377,8382,8387,8395,8400,8402,8405,8407,8410,8412,8422,8425,8432,8437,8442,8450,8457,8465,8472,8475,8477,8480,8482,8487,8492,8497,8500,8502,8505,8507,8510,8512,8520,8522,8542,8547,8572,8580,8582,8585,8587,8590,8597,8602,8605,8607,8610,8612,8622,8625,8632,8640,8652,8662,8667,8670,8672,8682,8697,8700,8702,8707,8717,8727,8730,8732,8752,8755,8762,8765,8770,8772,8782,8785,8800,8802,8805,8807,8812,8815,8817,8827,8835,8837,8842,8847,8852,8872,8877,8882,8885,8887,8892,8895,8900,8905,8910,8912,8922,8927,8935,8937,8940,8942,8945,8950,8955,8957,8962,8982,8985,8990,8992,8997,9002,9005,9010,9015,9020,9030,9032,9042,9045,9052,9055,9060,9062,9067,9070,9080,9082,9085,9087,9090,9095,9097,9100,9110,9115,9125,9127,9130,9140,9145,9152,9155,9157,9162,9165,9170,9180,9182,9185,9190,9195,9197,9200,9202,9205,9210,9215,9220,9222,9225,9227,9230,9240,9247,9250,9252,9257,9262,9270,9275,9282,9285,9292,9295,9300,9302,9305,9307,9310,9312,9315,9320,9322,9325,9327,9332,9335,9340,9342,9345,9350,9355,9357,9360,9365,9367,9372,9380,9387,9395,9400,9410,9412,9415,9420,9432,9437,9445,9447,9450,9455,9460,9467,9470,9475,9482,9485,9510,9515,9525,9545,9550,9552,9566,9567,9577,9587,9595,9600,9605,9650,9656,9670,9682,9725,9737,9797,9841,9851,9855,9870,9882,9887,9892,9912,9922,9932,9942,9947,9955,9957,9967,9970,9997,10002,10027,10032,10062,10075,10090,10092,10100,10122,10130,10140,10143,10153,10158,10172,10208,10222,10223,10225,10228,10235,10240,10265,10278,10280,10287,10288,10330,10353,10357,10358,10373,10377,10395,10418,10422,10425,10440,10442,10475,10513,10520,10535,10548,10552,10570,10572,10577,10578,10582,10597,10613,10618,10623,10635,10670,10705,10710,10713,10723,10883,10963,10968,10988,11000,11008,11013,11025,11043,11055,11058,11079,11084,11098,11105,11113,11123,11144,11159,11173,11180,11199,11209,11213,11218,11219,11229,11239,11245,11253,11264,11265,11268,11273,11283,11294,11320,11325,11359,11369,11375,11379,11395,11400,11409,11424,11425,11429,11449,11468,11473,11496,11519,11538,11546,11571,11586,11601,11616,11636,11653,11654,11689,11703,11718,11733,11734,11741,11748,11753,11784,11801,11866,11871,11904,12029,12039,12044,12106,12111,12136,12169,12170,12175,12184,12189,12199,12204,12209,12214,12235,12245,12250,12269,12299,12320,12334,12335,12341,12365,12371,12374,12375,12381,12386,12391,12394,12405,12409,12410,12415,12419,12424,12430,12436,12441,12444,12445,12449,12450,12451,12455,12471,12475,12491,12501,12509,12525,12531,12534,12541,12546,12550,12556,12565,12569,12584,12586,12589,12591,12609,12615,12634,12655,12674,12675,12676,12679,12680,12681,12695,12700,12704,12705,12706,12710,12714,12719,12721,12740,12756,12760,12761,12776,12811,12816,12834,12836,12839,12851,12854,12870,12874,12885,12889,12890,12895,12896,12914,12919,12920,12926,12930,12935,12944,12969,12974,12975,12994,12995,13000,13009,13011,13020,13029,13035,13036,13041,13044,13051,13054,13056,13089,13090,13111,13114,13116,13119,13120,13126,13146,13161,13169,13170,13175,13176,13179,13185,13189,13191,13226,13256,13301,13311,13316,13370,13394,13401,13415,13459,13470,13479,13526,13561,13574,13576,13595,13608,13611,13633,13638,13658,13685,13698,13703,13706,13727,13771,13911,13917,14067,14072};
        // TODO
//        std::set<int> m_scans{8076, 8154, 8364, 8292, 8496, 8196, 7860, 6486, 12316, 8178, 7962, 8202, 8202, 7602,
//                              12591, 7110, 8184, 12241, 8166, 7044, 13487, 8208, 8202, 8376, 6093, 7968, 8178, 8418,
//                              7344, 8214, 8172, 12229, 8874, 6870, 8172, 12940, 7854, 6188, 8280, 7758, 8149, 7999,
//                              7549, 8209, 8083, 8035, 8005, 6315, 8059, 12147, 7711, 7705, 8059, 8059, 8401, 8046, 7957,
//                              8040, 7969, 13326, 8677, 6919, 12456, 8029, 12084, 6805, 8046, 7165, 7885, 5944, 13243,
//                              7927, 8046, 8053, 7591, 6709, 12048, 8040, 8040, 8281, 8035, 13308, 7952, 7622, 8054,
//                              8090, 8174, 8210, 12078, 8036, 7994, 7670, 6231, 8030, 8006, 7910, 6878, 8018, 8024, 8024,
//                              8654, 8030, 8030, 7760, 8366, 7838, 13307, 8011, 9344, 6668, 12057, 6129, 5779, 7358,
//                              13256, 7754, 7616, 7106, 12069, 7490, 9396, 9486, 9522, 9648, 9312, 9396, 9390, 9414,
//                              9390, 9276, 9438, 9426, 9636, 9384, 9480, 9372, 9630, 9318, 9492, 9582, 9402, 9570, 9498,
//                              9630, 9438, 9438, 9372, 9510, 9498, 9420, 9450, 9432, 9414, 7536, 9486, 9145, 9301, 9469,
//                              9487, 9211, 9265, 9235, 9235, 9217, 9289, 9163, 9319, 9481, 9247, 9241, 9193, 9229, 9205,
//                              9109, 9331, 9475, 9463, 9403, 9277, 9469, 9427, 9445, 9397, 9289, 9247, 9235, 9283, 9259,
//                              9211, 7363, 9211, 9217, 9265, 9224, 9194, 9170, 9277, 9277, 9464, 9224, 9434, 9236, 9230,
//                              9068, 9470, 9206, 9284, 9098, 9296, 9440, 9194, 9176, 9152, 9422, 9332, 9404, 9152, 9242,
//                              9176, 9302, 9254, 9104, 9254, 9248, 9332, 9189, 9284, 9230, 9182, 7334, 9218, 9206, 10267,
//                              10375, 10207, 10237, 9192, 8886, 8496, 8034, 7974, 9132, 7794, 9042, 10537, 5239, 6546,
//                              5398, 7116, 10579, 7338, 6852, 6594, 10567, 10549, 7542, 6990, 9054, 8886, 7188, 8982,
//                              8040, 5281, 9908, 10063, 10051, 8335, 10051, 8719, 7855, 9037, 7771, 8533, 7867, 8905,
//                              9895, 8887, 7741, 7375, 10092, 10099, 7477, 8881, 5076, 7159, 6811, 7189, 6429, 6535,
//                              7615, 10285, 5235, 6411, 8017, 10255, 5596, 6691, 10087, 6691, 9745, 10022, 10160, 10034,
//                              10004, 8972, 8324, 7856, 8684, 8492, 7760, 8906, 7826, 7442, 8810, 7988, 10298, 10256,
//                              6345, 6489, 10394, 6363, 6746, 6549, 7322, 9668, 7172, 7322, 8840, 5026, 10154, 11046,
//                              11179, 11110, 11281, 11311, 11173, 10897, 10789, 11081, 11317, 11098, 11155, 10603, 10987,
//                              11073, 11299, 11323, 11167, 10777, 11239, 10891, 10579, 10777, 6146, 10951, 10597, 10783,
//                              10555, 11003, 6140, 10669, 10591, 10890, 11046, 11112, 11154, 11034, 11082, 10872, 11100,
//                              10884, 10818, 11058, 10614, 11142, 10524, 11202, 11178, 10435, 10686, 10423, 11154, 11022,
//                              11124, 10992, 6028, 11124, 10674, 10464, 10986, 10554, 10720, 10992, 10979, 10973, 11087,
//                              11026, 10872, 10676, 10949, 10682, 10430, 10628, 10532, 10996, 5796, 11111, 10424, 10827,
//                              10694, 10967, 11068, 11177, 10418, 10586, 10748, 10973, 10448, 11093, 11068, 10598, 10866,
//                              10842, 10742, 10448, 10484};
//        std::set<int> m2_scans{9071, 9053, 9144, 1217, 8964, 8956, 9089, 9298, 9064, 9036, 9104, 9271, 9173, 9255, 9175,
//                               9096, 8978, 9126, 9000, 9149, 8943, 9356, 9314, 9088, 9056, 14414, 9048, 9289, 9360,
//                               9193, 9234, 8941, 9385, 9241, 9358, 9069, 8995, 9079, 9263, 8940, 9153, 9336, 9250, 9074,
//                               1452, 9177, 8966, 9216, 9273, 9174, 9111, 9019, 9309, 9166, 9168, 9307, 9141, 9081, 9116,
//                               9138, 9181, 9251, 9079, 9209, 9159, 9316, 9241, 9254, 8912, 9016, 9244, 9184, 9341, 9212,
//                               14487, 9229, 9288, 9442, 9027, 9162, 8886, 8959, 9231, 9266, 9313, 9228, 9127, 9119,
//                               9088, 9336, 9049, 9312, 9183, 9297, 9311, 9227, 9351, 9163, 9113, 8979, 9337, 9258, 7134,
//                               9376, 9231, 9457, 9352, 9336, 9462, 9273, 9103, 9381, 9283, 9419, 9286, 9284, 9124, 9127,
//                               9407, 9232, 9122, 9271, 9333, 9228, 9332, 9221, 9316, 9324, 9241, 9358, 9449, 9442, 9339,
//                               9401, 9254, 9143, 9123, 14635, 9498, 9219, 9348, 9377, 9141, 9452, 9422, 7361, 7314,
//                               7316, 7221, 7000, 2865, 7420, 7315, 7310, 7336, 7311, 7169, 7280, 6979, 6975, 7301, 7298,
//                               7376, 7165, 7501, 7085, 7064, 7508, 7351, 7289, 7094, 6973, 7364, 6978, 7450, 7510, 7015,
//                               7211, 6848, 7271, 7354, 6809, 6796, 7190, 7274, 7284, 6934, 7112, 6923, 7169, 6742, 6815,
//                               7212, 7197, 6916, 7201, 6747, 6811, 2896, 7094, 7189, 6771, 7167, 6993, 7188, 7024, 7174,
//                               7099, 7104, 7172, 7193, 7159, 7204, 6765, 7163, 6893, 7203, 6939, 7049, 6959, 7202, 6998,
//                               6949, 6942, 6958, 7284, 7283, 7318, 7276, 6991, 7288, 7197, 6904, 7429, 7339, 6977, 7403,
//                               6921, 7416, 7157, 7246, 7504, 7389, 7401, 6812, 7129, 7247, 6918, 7107, 7477, 7034, 7292,
//                               7454, 7027, 7297, 7026, 7464, 7411, 7293, 7333, 7387, 7043, 7024, 7278, 7289, 7249, 7331,
//                               7128, 7303, 6987, 6819, 7304, 7203, 7406, 7366, 7407, 7402, 7148, 7483, 7443, 7198, 4730,
//                               4575, 4665, 4314, 4781, 4074, 4631, 5845, 4630, 4779, 8313, 4634, 4589, 4615, 4623, 8498,
//                               3683, 5186, 4616, 3129, 8265, 5565, 4610, 9184, 9066, 3488, 4644, 4598, 4206, 4633, 2904,
//                               2949, 4494, 2138, 4203, 3906, 3663, 8274, 3070, 4805, 4759, 4575, 4710, 4410, 8167, 4411,
//                               4798, 4675, 4587, 4576, 4598, 3119, 4586, 4585, 5905, 4140, 3684, 8094, 4597, 4420, 4617,
//                               4578, 3664, 4603, 2336, 3955, 4600, 3499, 8085, 4607, 4601, 2888, 8155, 9072, 9172, 3082,
//                               8709, 4622, 4721, 8399, 4613, 8406, 8097, 2364, 4861, 4595, 4275, 4421, 8154, 8158, 7559,
//                               2826, 4717, 4661, 4616, 4347, 4682, 4826, 4772, 4656, 8346, 8608, 3130, 4651, 4045, 2947,
//                               8284, 4367, 4457, 3989, 2132, 8283, 3560, 9209, 9342, 8289, 3527, 4659, 8303, 4648, 4253,
//                               2835, 6433, 6428, 4445, 5249, 5538, 5035, 6485, 6714, 4880, 4383, 4448, 4123, 5478, 3210,
//                               3666, 4035, 4414, 3225, 4243, 4028, 4599, 2548, 6703, 3493, 5373, 3838, 6614, 6651, 4291,
//                               3401, 3863, 1176, 6638, 2023, 3231, 4338, 6441, 4388, 6497, 5565, 4517, 6496, 4456, 5275,
//                               5068, 4511, 5499, 4914, 4078, 4186, 5501, 3249, 2092, 4438, 2416, 3892, 4323, 3655, 6377,
//                               2256, 6471, 3167, 3477, 3950, 3584, 2973, 3359, 3170, 3264, 3101, 6469, 6459, 4460, 6499,
//                               6498, 5549, 4482, 6593, 5258, 6484, 6734, 5031, 4528, 5417, 4447, 4171, 4476, 4065, 4629,
//                               4427, 3260, 5396, 3619, 3245, 3491, 6721, 3884, 6764, 2421, 3501, 2530, 6402, 2259, 4373,
//                               6627, 6704, 3107, 6694, 6608, 6711, 3689, 6537, 2088, 6686, 13093, 5910, 12761, 12646,
//                               12976, 12698, 5628, 5946, 12484, 12529, 13001, 12554, 12628, 12882, 5929, 12797, 12938,
//                               12444, 12851, 3765, 11921, 11781, 12777, 11976, 12271, 12622, 12352, 12988, 12814, 12609,
//                               11566, 3241, 12771, 13091, 5934, 5940, 12637, 12833, 6340, 12995, 12655, 12595, 5974,
//                               12880, 12925, 12631, 12385, 12413, 12845, 12688, 13051, 12421, 11887, 12986, 12781,
//                               12803, 12258, 12365, 11908, 12801, 11487, 12797, 12206, 3816, 11880, 12798, 12063, 5939,
//                               12897, 12772, 13232, 12788, 13112, 12642, 5644, 12722, 12779, 12930, 5961, 13012, 5958,
//                               12652, 13058, 12919, 12469, 12480, 13205, 12923, 12622, 12929, 12447, 12920, 12538,
//                               12922, 13118, 12918, 12859, 12939, 12924, 12935, 12914, 12713, 12479, 11750, 12927};

#endif
        MSExperiment exp;

        auto fd = FLASHDeconvAlgorithm();
        Param fd_param = getParam_().copy("Algorithm:", true);
        //fd_param.setValue("tol", getParam_().getValue("tol"));
        if (ensemble) {
            fd_param.setValue("min_rt", .0);
            fd_param.setValue("max_rt", .0);
        }
        fd.setParameters(fd_param);
        fd.calculateAveragine(use_RNA_averagine);
        auto avg = fd.getAveragine();
        auto mass_tracer = MassFeatureTrace();
        Param mf_param = getParam_().copy("FeatureTracing:", true);
        DoubleList isotope_cosines = fd_param.getValue("min_isotope_cosine");
        //mf_param.setValue("mass_error_ppm", ms1tol);
        mf_param.setValue("noise_threshold_int", .0);
        mf_param.setValue("reestimate_mt_sd", "false");
        mf_param.setValue("trace_termination_criterion", "outlier");
        mf_param.setValue("trace_termination_outliers", 20);
        mf_param.setValue("chrom_peak_snr", .0);
        if (((double) mf_param.getValue("min_isotope_cosine")) < 0) {
            mf_param.setValue("min_isotope_cosine", isotope_cosines[0]);
        }
        mass_tracer.setParameters(mf_param);

        unordered_map<int, PeakGroup> precursor_peak_groups; // MS2 scan number, peak group

        OPENMS_LOG_INFO << "Running FLASHDeconv ... " << endl;

        for (auto it = map.begin(); it != map.end(); ++it) {
            scan_number = SpectrumLookup::extractScanNumber(it->getNativeID(),
                                                            map.getSourceFiles()[0].getNativeIDTypeAccession());
            if (it->empty()) {
                continue;
            }

            float progress = (float) (it - map.begin()) / map.size();
            if (progress > prev_progress + .01) {
                printProgress_(progress);
                prev_progress = progress;
            }

            int ms_level = it->getMSLevel();
            if (ms_level > current_max_ms_level) {
                continue;
            }
            spec_cntr[ms_level - 1]++;
            auto deconv_begin = clock();
            auto deconv_t_start = chrono::high_resolution_clock::now();

            //auto deconvoluted_spectrum = DeconvolutedSpectrum(*it, scan_number);
            // for MS>1 spectrum, register precursor
            std::vector<DeconvolutedSpectrum> precursor_specs;

            if (ms_level > 1 && last_deconvoluted_spectra.find(ms_level - 1) != last_deconvoluted_spectra.end()) {
                precursor_specs = (last_deconvoluted_spectra[ms_level - 1]);
            }


#ifdef DEBUG_EXTRA_PARAMTER
            if (ms_level == 1) {

                fi_out << "Spec\t" << it->getRT() << "\n";

                for (auto &p : *it) {
                    if (p.getIntensity() <= 0) {
                        continue;
                    }

                    fi_out << p.getMZ() << "\t" << p.getIntensity() << "\n";
                }
            }

            if(it->getMSLevel() == 2 && m2_scans.find(scan_number) != m2_scans.end()){
                m_scans.insert(precursor_specs[precursor_specs.size()-1].getScanNumber());
            }

            // continue;
#endif


            std::vector<Precursor> triggeredPeaks;
            /*
            if (ms_level < current_max_ms_level)
            {
              auto tit = it + 1;
              for (; tit != map.end(); ++tit)
              {
                if (tit->getMSLevel() == ms_level)
                {
                  break;
                }

                for (auto &peak: tit->getPrecursors())
                {
                  triggeredPeaks.push_back(peak);
                }
              }
            }*/

            auto deconvoluted_spectrum = fd.getDeconvolutedSpectrum(*it,
                                                                    triggeredPeaks,
                                                                    precursor_specs,
                                                                    scan_number,
                                                                    num_last_deconvoluted_spectra,
                                                                    precursor_map_for_real_time_acquisition);

            if (it->getMSLevel() > 1 && !deconvoluted_spectrum.getPrecursorPeakGroup().empty()) {
                precursor_peak_groups[scan_number] = deconvoluted_spectrum.getPrecursorPeakGroup();
            }


            if (it->getMSLevel() == 2 && !in_train_file.empty() && !out_train_file.empty()
                && !deconvoluted_spectrum.getPrecursorPeakGroup().empty()
                    ) {
                double pmz = deconvoluted_spectrum.getPrecursor().getMZ();
                auto pg = deconvoluted_spectrum.getPrecursorPeakGroup();
                double pmass = //pg.getMonoMass();
                        top_pic_map[scan_number].proteform_id_ < 0 ? pg.getMonoMass()
                                                                   : top_pic_map[scan_number].adj_precursor_mass_;
                double precursor_intensity = deconvoluted_spectrum.getPrecursor().getIntensity();
                int fr = top_pic_map[scan_number].first_residue_;
                int lr = top_pic_map[scan_number].last_residue_;

                QScore::writeAttTsv(scan_number, top_pic_map[scan_number].protein_acc_,
                                    top_pic_map[scan_number].proteform_id_,
                                    deconvoluted_spectrum.getOriginalSpectrum().getRT(),
                                    deconvoluted_spectrum.getPrecursorScanNumber(),
                                    pmass, pmz,
                                    top_pic_map[scan_number].intensity_,
                                    pg, fr, lr,
                                    deconvoluted_spectrum.getPrecursorCharge(),
                                    precursor_intensity, top_pic_map[scan_number].unexp_mod_,
                                    top_pic_map[scan_number].proteform_id_ >= 0,
                                    top_pic_map[scan_number].e_value_, top_pic_map[scan_number].proteofrom_q_value_,
                                    avg, out_train_stream, write_detail_qscore_att);

            }


            if (!out_mzml_file.empty()) {
                if (it->getMSLevel() == 1 || !deconvoluted_spectrum.getPrecursorPeakGroup().empty()) {
                    exp.addSpectrum(deconvoluted_spectrum.toSpectrum(mzml_charge));
                }
            }
            elapsed_deconv_cpu_secs[ms_level - 1] += double(clock() - deconv_begin) / CLOCKS_PER_SEC;
            elapsed_deconv_wall_secs[ms_level - 1] += chrono::duration<double>(
                    chrono::high_resolution_clock::now() - deconv_t_start).count();

            if (ms_level < current_max_ms_level) {
                //if(last_deconvoluted_spectra.find(ms_level) != last_deconvoluted_spectra.end())
                //{
                //  lastlast_deconvoluted_spectra[ms_level] = last_deconvoluted_spectra[ms_level];
                //}

                if (last_deconvoluted_spectra[ms_level].size() >= max_num_last_deconvoluted_spectra) {
                    last_deconvoluted_spectra.erase(last_deconvoluted_spectra.begin());
                }
                last_deconvoluted_spectra[ms_level].push_back(deconvoluted_spectrum);
            }


            //if (ms_level < current_max_ms_level)
            //{
            //  last_deconvoluted_spectra[ms_level] = deconvoluted_spectrum_; // to register precursor in the future..
            //}

            if (!ensemble) {
                mass_tracer.storeInformationFromDeconvolutedSpectrum(
                        deconvoluted_spectrum);// add deconvoluted mass in mass_tracer
            }

            if (deconvoluted_spectrum.empty()) {
                continue;
            }

            qspec_cntr[ms_level - 1]++;
            mass_cntr[ms_level - 1] += deconvoluted_spectrum.size();
            if (out_spec_streams.size() > ms_level - 1) {
                deconvoluted_spectrum
                        .writeDeconvolutedMasses(out_spec_streams[ms_level - 1], in_file, avg, write_detail);
            }
            if (out_topfd_streams.size() > ms_level - 1) {
                deconvoluted_spectrum.writeTopFD(out_topfd_streams[ms_level - 1], avg, topFD_SNR_threshold);

                if(ms_level ==2 && !deconvoluted_spectrum.getPrecursorPeakGroup().empty()){
                    f_out_topfd_file_log << scan_number <<","<<deconvoluted_spectrum.getPrecursorPeakGroup().getMonoMass()
                    <<","<<deconvoluted_spectrum.getPrecursorPeakGroup().getRepAbsCharge()<<","
                    <<deconvoluted_spectrum.getPrecursorPeakGroup().getIntensity()<<"\n";
                }


                //deconvoluted_spectrum.writeTopFD(out_topfd_streams[ms_level - 1], scan_number + 200000, avg, .5);
                //double precursor_offset = ((double) rand() / (RAND_MAX)) * 90 + 10; // 10 - 100
                //precursor_offset = ((double) rand() / (RAND_MAX))>.5? precursor_offset : -precursor_offset;
                //deconvoluted_spectrum.writeTopFD(out_topfd_streams[ms_level - 1], avg, topFD_SNR_threshold, 1, precursor_offset);
            }

            //deconvoluted_spectrum_.clearPeakGroupsChargeInfo();
            //deconvoluted_spectrum_.getPrecursorPeakGroup().clearChargeInfo();

        }

        printProgress_(1); //
        std::cout << std::endl;

        // mass_tracer run
        if (!ensemble) {
            mass_tracer
                    .findFeatures(in_file, !out_promex_file.empty(), !out_topfd_feature_file.empty(),
                                  precursor_peak_groups,
                                  feature_cntr, feature_index, out_stream, out_promex_stream, out_topfd_feature_streams,
                                  fd.getAveragine());
        }
        if (!out_mzml_file.empty()) {
            MzMLFile mzml_file;
            mzml_file.store(out_mzml_file, exp);
        }

        for (int j = 0; j < (int) current_max_ms_level; j++) {
            if (spec_cntr[j] == 0) {
                continue;
            }

            if (ensemble) {
                OPENMS_LOG_INFO << "So far, FLASHDeconv found " << mass_cntr[j] << " masses in the ensemble MS"
                                << (j + 1) << " spectrum" << endl;

            } else {
                OPENMS_LOG_INFO << "So far, FLASHDeconv found " << mass_cntr[j] << " masses in " << qspec_cntr[j]
                                << " MS" << (j + 1) << " spectra out of "
                                << spec_cntr[j] << endl;
            }
        }
        if (feature_cntr > 0) {
            OPENMS_LOG_INFO << "Mass tracer found " << feature_cntr << " features" << endl;
        }

        auto t_end = chrono::high_resolution_clock::now();
        auto end = clock();

        elapsed_cpu_secs = double(end - begin) / CLOCKS_PER_SEC;
        elapsed_wall_secs = chrono::duration<double>(t_end - t_start).count();

        OPENMS_LOG_INFO << "-- done [took " << elapsed_cpu_secs << " s (CPU), " << elapsed_wall_secs
                        << " s (Wall)] --"
                        << endl;

        int total_spec_cntr = 0;
        for (int j = 0; j < (int) current_max_ms_level; j++) {
            total_spec_cntr += spec_cntr[j];

            OPENMS_LOG_INFO << "-- deconv per MS" << (j + 1)
                            << " spectrum (except spec loading, feature finding) [took "
                            << 1000.0 * elapsed_deconv_cpu_secs[j] / total_spec_cntr
                            << " ms (CPU), " << 1000.0 * elapsed_deconv_wall_secs[j] / total_spec_cntr
                            << " ms (Wall)] --"
                            << endl;
        }

#ifdef DEBUG_EXTRA_PARAMTER
        f_out_topfd_file_log.close();
        for (auto it = map.begin(); it != map.end(); ++it) {

            scan_number = SpectrumLookup::extractScanNumber(it->getNativeID(),
                                                            map.getSourceFiles()[0].getNativeIDTypeAccession());

            if (m_scans.find(scan_number) == m_scans.end()) {
                continue;
            }
            fi_m << "Spec{" << scan_number << "}=[";
            for (auto &p : *it) {
                if(p.getIntensity() <= 0){
                    continue;
                }
                fi_m << p.getMZ() << "," << std::setprecision(2) << p.getIntensity() << std::setprecision(-1) << "\n";
            }
            fi_m << "];";

        }

        fi_out.close(); //
        fi_m.close();
#endif
        out_stream.close();

        if (!out_promex_file.empty()) {
            out_promex_stream.close();
        }
        if (!out_topfd_feature_file.empty()) {
            for (auto &out_topfd_feature_stream : out_topfd_feature_streams) {
                out_topfd_feature_stream.close();
            }
        }


        if (!out_topfd_file.empty()) {
            for (auto &out_topfd_stream : out_topfd_streams) {
                out_topfd_stream.close();
            }
        }
        if (!out_spec_file.empty()) {
            for (auto &out_spec_stream : out_spec_streams) {
                out_spec_stream.close();
            }
        }

        if (!out_train_file.empty()) {
            out_train_stream.close();
        }


        return EXECUTION_OK;
    }

    static void printProgress_(float progress) {
        float bar_width = 70;
        std::cout << "[";
        int pos = (int) (bar_width * progress);
        for (int i = 0; i < bar_width; ++i) {
            if (i < pos) {
                std::cout << "=";
            } else if (i == pos) {
                std::cout << ">";
            } else {
                std::cout << " ";
            }
        }
        std::cout << "] " << int(progress * 100.0) << " %\r";
        std::cout.flush();
    }
};

// the actual main function needed to create an executable
int main(int argc, const char **argv) {
    TOPPFLASHDeconv tool;
    return tool.main(argc, argv);
}
